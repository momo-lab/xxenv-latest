#!/usr/bin/env bash
# Usage: *env latest <command> [<args>]
#        *env latest -p|--print [<version-prefix>]
#        *env latest -P|--print-installed [<version-prefix>]
#        *env latest -h|--help
#        *env latest -v|--version
#
#   *env is pyenv, rbenv, etc...
#
#   -p/--print              Show latest version
#   -P/--print_installed    Show installed latest version
#
# Supported *env commands:
#   install
#   uninstall (All except the latest version)
#   global
#   local
#   prefix
#
# Original subcommands:
#   update-major            Update the major version of the currently active version
#   update-minor            Update the minor version of the currently active version
#   update-revision         Update the revision of the currently active version
set -e
[[ -v PYENV_DEBUG ]] && set -b

XXENV_LATEST_VERSION="0.2.1"
DEFAULT_QUERY="[0-9]+"

COMMAND=${0##*/}; COMMAND=${COMMAND%%-*}
SUBCOMMAND="$1"

# Provide pyenv completions
# Provide rbenv completions
# Provide nodenv completions
# Provide goenv completions
# Provide phpenv completions
if [[ $1 == --complete ]]; then
    shift 1
    if [[ -z $1 ]]; then
        echo install
        echo global
        echo local
        echo prefix
        echo update-major
        echo update-minor
        echo update-revision
        echo --print
        echo --print-installed
        echo --help
        echo --version
    else
        SUBCOMMAND=$1
        shift 1
        "$COMMAND-$SUBCOMMAND" --complete "$@"
    fi
    exit
fi

abort() {
    {
        if (($# == 0)); then
            cat -
        else
            echo "$COMMAND: $*"
        fi
    } >&2
    exit 1
}

version() {
  echo "xxenv-latest ${XXENV_LATEST_VERSION}"
}

get_server_version() {
  local query=${1:-$DEFAULT_QUERY}
  local install_opts="--list"
  if [[ "$COMMAND" == "rbenv" ]]; then
    "$COMMAND"-install --help | grep -q -- --list-all \
      && install_opts="--list-all"
  fi

  "$COMMAND"-install $install_opts 2> /dev/null \
    | grep -vE "(^Available versions:|-src|-dev|-latest|-stm|[-\.]rc|-alpha|-beta|[-\.]pre|-next|(a|b|c)[0-9]+$|snapshot|master|-nightly)" \
    | grep -E "^\s*${query/./\\.}\b" \
    | sed 's/^[[:space:]]*//' \
    | sort --version-sort \
    | tail -1
}

get_local_versions() {
  local query=${1:-$DEFAULT_QUERY}
  "$COMMAND"-versions --skip-aliases \
    | sed -e 's/^\*//' -e 's/^[[:space:]]*//' -e 's/ (set by.*$//' \
    | grep -v "/envs" \
    | grep -E "^\s*$query" \
    | sort --version-sort
}

get_local_version() {
    get_local_versions "$@" | tail -1
}

print_version() {
    local version
    version=$(get_"$1"_version "$2")
    [[ -z $version ]] && abort "Version '$2' is not found."
    echo "$version"
}

latest() {
    local getcmd=get_$1_version; shift 1
    local -a new_args
    local version
    local arg
    for arg; do
        case "$arg" in
            -*)
                new_args+=("$arg")
                ;;
            *)
                version=$($getcmd "$arg")
                [[ -z $version ]] && abort "Version '$arg' is not found."
                new_args+=("$version")
                ;;
        esac
        shift 1
    done
    if [[ -z $version ]]; then
        version=$($getcmd)
        [[ -z $version ]] && abort "Version is not found."
        new_args+=("$version")
    fi

    echo "Latest version is '$version'"
    "$COMMAND-$SUBCOMMAND" "${new_args[@]}"
}

uninstall_not_latest() {
    local arg
    local -a new_args
    local version_prefix
    for arg; do
        case "$arg" in
            -*)
                new_args+=("$arg")
                ;;
            *)
                version_prefix=$arg
                ;;
        esac
        shift 1
    done
    local version
    for version in $(get_local_versions "$version_prefix" | sed '$ d'); do
        "$COMMAND"-uninstall "${new_args[@]}" "$version"
    done
}

update() {
    local version_type=$1; shift
    local mode=local
    local now_version
    now_version=$("$COMMAND"-local 2> /dev/null)
    if [[ -z "$now_version" ]]; then
        mode=global
        now_version=$("$COMMAND"-global)
    fi
    [[ "$now_version" == "system" ]] && abort "Currently version is 'system'."
    local query
    case "$version_type" in
        major)
            query=$(echo "$now_version" | sed -e 's/[0-9]\+\.[0-9]\+\.[0-9]\+$//')
            ;;
        minor)
            query=$(echo "$now_version" | sed -e 's/\.[0-9]\+\.[0-9]\+$//')
            ;;
        revision)
            query=$(echo "$now_version" | sed -e 's/\.[0-9]\+$//')
            ;;
    esac
    local new_version
    new_version=$(print_version server "$query")
    echo "Latest version is '$new_version'"
    "$COMMAND"-install --skip-existing "$new_version"
    "$COMMAND-$mode" "$new_version"
}

shift 1
case "$SUBCOMMAND" in
    "")
        version
        "$COMMAND"-help latest
        ;;
    -h | --help)
        "$COMMAND"-help latest
        ;;
    -v | --version)
        version
        ;;
    -p | --print)
        print_version server "$@"
        ;;
    -P | --print-installed)
        print_version local "$@"
        ;;
    install)
        latest server "$@"
        ;;
    uninstall)
        uninstall_not_latest "$@"
        ;;
    global | local | prefix)
        latest local "$@"
        ;;
    update-major)
        update major
        ;;
    update-minor)
        update minor
        ;;
    update-revision)
        update revision
        ;;
    *)
        abort "no such command \`$SUBCOMMAND'"
        ;;
esac
